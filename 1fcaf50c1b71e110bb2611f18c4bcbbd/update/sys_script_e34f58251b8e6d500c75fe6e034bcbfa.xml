<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_solsa_soporte_sn_ejehoras</collection>
        <condition/>
        <description>Suma las horas consumidas del periodo actual y las inserta en el periodo</description>
        <execute_function>false</execute_function>
        <filter_condition table="x_solsa_soporte_sn_ejehoras">u_slx_horas_consumidasVALCHANGES^EQ<item endquery="false" field="u_slx_horas_consumidas" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>SLX Sumar Horas consumidas del Periodo</name>
        <order>200</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var totalHoras = 0;

	// Busca el periodo actual
    var registro = new GlideRecord("x_solsa_soporte_sn_registro_mensual_soporte_servicenow");
    registro.addQuery("sys_id", current.u_slx_origen.u_slx_periodo);
    registro.query();
    if (registro.next()) {
		// Obtiene todos los soportes del periodo
        var sopsn = new GlideRecord("x_solsa_soporte_sn_sopsn");
        sopsn.addQuery("u_slx_periodo", registro.sys_id);
        sopsn.query();
        while (sopsn.next()) {
			//Obtiene todos las horas ejecutadas y suma las horas
            var horasEj = new GlideRecord("x_solsa_soporte_sn_ejehoras");
            horasEj.addQuery("u_slx_origen", sopsn.sys_id);
            horasEj.query();
            while (horasEj.next()) {
				totalHoras += horasEj.u_slx_horas_consumidas;
            }
        }
		registro.u_slx_horas_consumidas = totalHoras;
		registro.update();
    }

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>slx.bb</sys_created_by>
        <sys_created_on>2023-04-06 16:48:53</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e34f58251b8e6d500c75fe6e034bcbfa</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>SLX Sumar Horas consumidas del Periodo</sys_name>
        <sys_overrides/>
        <sys_package display_value="Soporte Servicenow" source="x_solsa_soporte_sn">1fcaf50c1b71e110bb2611f18c4bcbbd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Soporte Servicenow">1fcaf50c1b71e110bb2611f18c4bcbbd</sys_scope>
        <sys_update_name>sys_script_e34f58251b8e6d500c75fe6e034bcbfa</sys_update_name>
        <sys_updated_by>slx.bb</sys_updated_by>
        <sys_updated_on>2023-04-06 18:01:04</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=e34f58251b8e6d500c75fe6e034bcbfa"/>
</record_update>
